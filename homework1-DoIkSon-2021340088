#number 2

for i in range(2):
  print(' ', end = '')
print('S')

for i in range(5):
  if i % 2 != 0:
    print('S', end = '')
  else:
    print(' ', end = '')
print('')

print('S', end = '')
for i in range(3):
  print(' ', end = '')
print('S')

for i in range(2):
  print(' ', 'S')

for i in range(5):
  print('S', end = '')
print('')

for i in range(3):
  print('', 'S')

print(' ', end = '')
for i in range(4):
  print('S', end = '')
  
#number 3  --------------------------------------------------------------------------------------------------------------------------------------------------

from numpy import random

#list_random = random.randint(10, size = 1000000)
list_stuid = [3, 4, 0, 0, 8, 8]

count = 0
for k in range(100):
  list_random = random.randint(10, size = 1000000)
  for i in range(0, len(list_random) - len(list_stuid)):
    same = 1 
    for j in range(len(list_stuid)):                             #checking if six consecutive number combination is equal to the student id number
      if(list_random[i + j] != list_stuid[j]):
        same = 0
    if same == 1:                                                #if there is at least one matching, break out of for loop
      count += 1
      break
    

print(count/100)                                                 #the result seem to be around 0.6 ~ 0.7, which is close to the theoretical probability

#number 4 ----------------------------------------------------------------------------------------------------------------------------------------------------

import numpy as np                                #importing all the necessary libaries
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
from scipy.stats import pearsonr


data = pd.read_csv('housing.csv')            #reading csv file
print(data)


#creating scatterplot for median house value and median income
median_house_value = data['median_house_value']
median_income = data['median_income']

plt.figure(figsize = (6, 6))
plt.scatter(median_income, median_house_value, c = 'pink', alpha = 0.5)

plt.xlabel('median_income')
plt.ylabel('median_house_value')
plt.title('correlation between median house value and median income')

plt.show()

#creating a 3-D graph to show relationship between longitude, latitude and median house value

longitude = data['longitude']
latitude = data['latitude']

figure_three_d = plt.figure()
form = plt.axes(projection='3d')

form.scatter(longitude, latitude, median_house_value)

form.set_xlabel('longitude')
form.set_ylabel('latitude')
form.set_zlabel('median house value')

plt.show()

#4.a

data_random1 = data.sample(frac = 0.5)                              #making two random datasets and extracting the necessary data
median_house_random1 = data_random1['median_house_value']
median_income_random1 = data_random1['median_income']

data_random2 = data.sample(frac = 0.5)
median_house_random2 = data_random2['median_house_value']
median_income_random2 = data_random2['median_income']

r1, p1 = pearsonr(median_house_random1, median_income_random1)      #deriving correlation coefficients
r2, p2 = pearsonr(median_house_random2, median_income_random2)

print(r1, r2)                        #the correlation coefficient for both random data sets are very similar
                                     #which makes sense because if the two datasets are randomized, the more likely
                                     #it is for them to be representative of the population, hence be more similar to 
                                     #each other

#4.b

data['bedrooms per household'] = data['households'] / data['total_bedrooms']    #making a new column in dataframe containing the number of 
                                                                                #bedrooms per household

avg_bedroom = data['bedrooms per household'].mean()                             #getting the mean number of bedrooms per household

plt.hist(data['bedrooms per household'], bins = 5)                              #creating histogram
plt.axvline(avg_bedroom, color = 'pink', linestyle = 'dashed', linewidth = 2)   #drawing a vertical line for the mean in the histogram

plt.xlabel('bedrooms')
plt.ylabel('frequency')
plt.title('number of bedrooms for a household')

plt.show()

#number 5 -----------------------------------------------------------------------------------------------------------------------------------------------

import numpy as np

c = np.array([[2,0,0,3,0,1,0,7], [2,0,2,1,3,4,0,0]])


#5.a
c_pseven = c + 7                 #shows c + 7

c_mseven = c - 7                 #shows c - 7

c_museven = c * 7                #shows c * 7

c_ad_itself = c + c              #shows c + c

c_di_itself = c / c              #shows c / c       #produces a runtime error because there are zeros

#5.b
c_dotprod = c * c                #shows c∙c

c_dotprod = np.dot(c, c.T)       #shows c∙c^T

c_dotprod2 = np.dot(c.T, c)      #shows c^T∙c

#number 6 ------------------------------------------------------------------------------------------------------------------------------------------------------

class Student:
  def __init__(self, name, gender, grade):                    #class student with three attributes: name, gender, grade
    self.name = name
    self.gender = gender
    self.grade = grade

  def print_grade(self):                                      #method for printing letter grade corresponding to numerical grade
    if self.grade >= 90:
      print(self.name + "'s grade is A")
    elif self.grade >= 80:
      print(self.name + "'s grade is B")
    elif self.grade >= 70:
      print(self.name + "'s grade is C")
    else:
      print(self.name + "has failed the class")

  def introduce(self):                                        #method for introducing oneself, including every attribute
    print(self.name + " is a " + self.gender + " student with a grade of " + str(self.grade))

  def higher_grade(self, other):                              #method for comparing grade with other student's grade
    if(self.grade > other.grade):
      print(self.name + "'s grade is higher than " + other.name + "'s grade.")
    else:
      print(other.name + "'s grade is higher than " + self.name + "'s grade.")


s1 = Student("Charlie", "boy", 95)
s2 = Student("David", "boy", 80)

s1.introduce()
s1.higher_grade(s2)
s1.print_grade()
